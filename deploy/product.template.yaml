AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31

Parameters:
  S3BucketName:
    Type: String
    Default: my-react-app-s3-bucket

Resources:
  StaticSiteBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref S3BucketName
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders:
              - '*'
            AllowedMethods:
              - GET
              - PUT
            AllowedOrigins:
              - '*'
            ExposedHeaders:
              - Date
            Id: CORSRules
            MaxAge: 3600
  APIGatewayS3AccessRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: my-s3-proxy-role
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - apigateway.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: read-from-s3
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "s3:GetObject"
                Resource: !Join
                  - "/"
                  - - !GetAtt StaticSiteBucket.Arn
                    - "*"
  MyRestApi:
    Type: 'AWS::ApiGateway::RestApi'
    Properties:
      Description: Proxying reactjs app from S3 via APIGW
      Name: MyRestAPI
      BinaryMediaTypes:
        - '*/*'

  FrontendApiGatewayRootMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref MyRestApi
      ResourceId:
        Fn::GetAtt: [MyRestApi, RootResourceId]
      HttpMethod: GET
      AuthorizationType: None
      MethodResponses:
        - StatusCode: '200'
          ResponseParameters:
            method.response.header.Date: true
            method.response.header.Content-Length: true
            method.response.header.Content-Type: true
            method.response.header.Content-Disposition: true
      Integration:
        Type: AWS
        IntegrationHttpMethod: GET
        Credentials:
          Fn::GetAtt: [APIGatewayS3AccessRole, Arn]
        IntegrationResponses:
          - StatusCode: '200'
            ResponseParameters:
              method.response.header.Date: integration.response.header.Date
              method.response.header.Content-Length: integration.response.header.Content-Length
              method.response.header.Content-Type: integration.response.header.Content-Type
              method.response.header.Content-Disposition: integration.response.header.Disposition
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:s3:path/${BucketName}/index.html
          - BucketName: !Ref S3BucketName

  FrontendApiGatewayItemOneResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref MyRestApi
      ParentId:
        Fn::GetAtt: [MyRestApi, RootResourceId]
      PathPart: '{item-one}'

  FrontendApiGatewayItemOneMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref MyRestApi
      ResourceId: !Ref FrontendApiGatewayItemOneResource
      HttpMethod: GET
      AuthorizationType: None
      RequestParameters:
        method.request.path.item-one: true
      MethodResponses:
        - StatusCode: '200'
          ResponseParameters:
            method.response.header.Date: true
            method.response.header.Content-Length: true
            method.response.header.Content-Type: true
            method.response.header.Content-Disposition: true
      Integration:
        Type: AWS
        IntegrationHttpMethod: GET
        Credentials:
          Fn::GetAtt: [APIGatewayS3AccessRole, Arn]
        RequestParameters:
          integration.request.path.item-one: method.request.path.item-one
        IntegrationResponses:
          - StatusCode: '200'
            ResponseParameters:
              method.response.header.Date: integration.response.header.Date
              method.response.header.Content-Length: integration.response.header.Content-Length
              method.response.header.Content-Type: integration.response.header.Content-Type
              method.response.header.Content-Disposition: integration.response.header.Disposition
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:s3:path/${BucketName}/index.html
          - BucketName: !Ref S3BucketName

  FrontendApiGatewayItemTwoResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref MyRestApi
      ParentId: !Ref FrontendApiGatewayItemOneResource
      PathPart: '{item-two}'

  FrontendApiGatewayItemTwoMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref MyRestApi
      ResourceId: !Ref FrontendApiGatewayItemTwoResource
      HttpMethod: GET
      AuthorizationType: None
      RequestParameters:
        method.request.path.item-one: true
        method.request.path.item-two: true
      MethodResponses:
        - StatusCode: '200'
          ResponseParameters:
            method.response.header.Date: true
            method.response.header.Content-Length: true
            method.response.header.Content-Type: true
            method.response.header.Content-Disposition: true
      Integration:
        Type: AWS
        IntegrationHttpMethod: GET
        Credentials:
          Fn::GetAtt: [APIGatewayS3AccessRole, Arn]
        RequestParameters:
          integration.request.path.item-one: method.request.path.item-one
          integration.request.path.item-two: method.request.path.item-two
        IntegrationResponses:
          - StatusCode: '200'
            ResponseParameters:
              method.response.header.Date: integration.response.header.Date
              method.response.header.Content-Length: integration.response.header.Content-Length
              method.response.header.Content-Type: integration.response.header.Content-Type
              method.response.header.Content-Disposition: integration.response.header.Disposition
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:s3:path/${BucketName}/{item-one}/{item-two}
          - BucketName: !Ref S3BucketName

  FrontendApiGatewayItemThreeResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref MyRestApi
      ParentId: !Ref FrontendApiGatewayItemTwoResource
      PathPart: '{item-three}'

  FrontendApiGatewayItemThreeMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref MyRestApi
      ResourceId: !Ref FrontendApiGatewayItemThreeResource
      HttpMethod: GET
      AuthorizationType: None
      RequestParameters:
        method.request.path.item-one: true
        method.request.path.item-two: true
        method.request.path.item-three: true
      MethodResponses:
        - StatusCode: '200'
          ResponseParameters:
            method.response.header.Date: true
            method.response.header.Content-Length: true
            method.response.header.Content-Type: true
            method.response.header.Content-Disposition: true
      Integration:
        Type: AWS
        IntegrationHttpMethod: GET
        Credentials:
          Fn::GetAtt: [ APIGatewayS3AccessRole, Arn ]
        RequestParameters:
          integration.request.path.item-one: method.request.path.item-one
          integration.request.path.item-two: method.request.path.item-two
          integration.request.path.item-three: method.request.path.item-three
        IntegrationResponses:
          - StatusCode: '200'
            ResponseParameters:
              method.response.header.Date: integration.response.header.Date
              method.response.header.Content-Length: integration.response.header.Content-Length
              method.response.header.Content-Type: integration.response.header.Content-Type
              method.response.header.Content-Disposition: integration.response.header.Disposition
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:s3:path/${BucketName}/{item-one}/{item-two}/{item-three}
          - BucketName: !Ref S3BucketName

  FrontendApiGatewayItemFourResource:
      Type: AWS::ApiGateway::Resource
      Properties:
        RestApiId: !Ref MyRestApi
        ParentId: !Ref FrontendApiGatewayItemThreeResource
        PathPart: '{item-four}'

  FrontendApiGatewayItemFourMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref MyRestApi
      ResourceId: !Ref FrontendApiGatewayItemFourResource
      HttpMethod: GET
      AuthorizationType: None
      RequestParameters:
        method.request.path.item-one: true
        method.request.path.item-two: true
        method.request.path.item-three: true
        method.request.path.item-four: true
      MethodResponses:
        - StatusCode: '200'
          ResponseParameters:
            method.response.header.Date: true
            method.response.header.Content-Length: true
            method.response.header.Content-Type: true
            method.response.header.Content-Disposition: true
      Integration:
        Type: AWS
        IntegrationHttpMethod: GET
        Credentials:
          Fn::GetAtt: [ APIGatewayS3AccessRole, Arn ]
        RequestParameters:
          integration.request.path.item-one: method.request.path.item-one
          integration.request.path.item-two: method.request.path.item-two
          integration.request.path.item-three: method.request.path.item-three
          integration.request.path.item-four: method.request.path.item-four
        IntegrationResponses:
          - StatusCode: '200'
            ResponseParameters:
              method.response.header.Date: integration.response.header.Date
              method.response.header.Content-Length: integration.response.header.Content-Length
              method.response.header.Content-Type: integration.response.header.Content-Type
              method.response.header.Content-Disposition: integration.response.header.Disposition
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:s3:path/${BucketName}/{item-one}/{item-two}/{item-three}/{item-four}
          - BucketName: !Ref S3BucketName

  
  FrontendApiGatewayItemFiveResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref MyRestApi
      ParentId: !Ref FrontendApiGatewayItemFourResource
      PathPart: '{item-five}'
  
  
  FrontendApiGatewayItemFiveMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref MyRestApi
      ResourceId: !Ref FrontendApiGatewayItemFiveResource
      HttpMethod: GET
      AuthorizationType: None
      RequestParameters:
        method.request.path.item-one: true
        method.request.path.item-two: true
        method.request.path.item-three: true
        method.request.path.item-four: true
        method.request.path.item-five: true
      MethodResponses:
        - StatusCode: '200'
          ResponseParameters:
            method.response.header.Date: true
            method.response.header.Content-Length: true
            method.response.header.Content-Type: true
            method.response.header.Content-Disposition: true
      Integration:
        Type: AWS
        IntegrationHttpMethod: GET
        Credentials:
          Fn::GetAtt: [ APIGatewayS3AccessRole, Arn ]
        RequestParameters:
          integration.request.path.item-one: method.request.path.item-one
          integration.request.path.item-two: method.request.path.item-two
          integration.request.path.item-three: method.request.path.item-three
          integration.request.path.item-four: method.request.path.item-four
          integration.request.path.item-five: method.request.path.item-five
        IntegrationResponses:
          - StatusCode: '200'
            ResponseParameters:
              method.response.header.Date: integration.response.header.Date
              method.response.header.Content-Length: integration.response.header.Content-Length
              method.response.header.Content-Type: integration.response.header.Content-Type
              method.response.header.Content-Disposition: integration.response.header.Disposition
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:s3:path/${BucketName}/{item-one}/{item-two}/{item-three}/{item-four}/{item-five}
          - BucketName: !Ref S3BucketName



  Deployment:
    Type: 'AWS::ApiGateway::Deployment'
    DependsOn:
      - MyRestApi
      - FrontendApiGatewayRootMethod
      - FrontendApiGatewayItemOneResource
      - FrontendApiGatewayItemOneMethod
      - FrontendApiGatewayItemTwoResource
      - FrontendApiGatewayItemTwoMethod
      - FrontendApiGatewayItemThreeResource
      - FrontendApiGatewayItemThreeMethod
      - FrontendApiGatewayItemFourResource
      - FrontendApiGatewayItemFourMethod
    Properties:
      RestApiId: !Ref MyRestApi
      Description: Dev deployment
      StageName: dev

Outputs:
  ApiEndpoint:
    Description: "API Gateway endpoint URL for dev"
    Value: !Sub "https://${MyRestApi}.execute-api.${AWS::Region}.amazonaws.com/dev"